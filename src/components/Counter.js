import { useSelector, useDispatch } from 'react-redux';

import { counterActions } from '../store/counter';
import classes from './Counter.module.css';

const Counter = () => {

  // When we call useDispatch(), we don't pass any arguments to it, but instead it gives us back a dispatch function which we can call and which will dispatch an action
  // against our Redux store
  // ! Dispatch is a function of the Redux store. You call store.dispatch to dispatch an action. This is the only way to trigger a state change.
  const dispatch = useDispatch();
  // ! the "state.counter" refers to const store = configureStore({reducer: { *counter*: counterSlice.reducer, auth: authSlice.reducer}}); to the *counter* you see 
  // ! in the store. The second ".counter" refers to 
  const counter = useSelector(state => state.counter.counter);
  const show = useSelector(state => state.counter.showCounter);


  console.log("show", show);

  const incrementHandler = () => {
    // We use dispatch to dispatch an action
    // ! Redux toolkit creates action objects which it dispatches where the type is a unique identifier generated by redux toolkit and any value you pass as argument
    // ! to this action method you're executing will be stored in a extra field called "payload"
    dispatch(counterActions.increment());
    console.log("hey")
  };

  const increaseHandler = () => {
    // ! amount actually comes from the "action". It's like saying action.amount
    dispatch(counterActions.increase(10));  // {type: SOME_UNIQUE_IDENTIFIER}
    console.log("ho")
  }

  const decrementHandler = () => {
    dispatch(counterActions.decrement());
  };


  // ! We must pass a function to useSelector, which will be executed by React-Redux, which will determine which piece of data we want to extract from our store
  // ! When you use useSelector, react-redux will set a subscription to the Redux store for this component, so your component will be updated and will receive 
  // ! the latest counter automatically whenever that data changes in the Redux Store

  const toggleCounterHandler = () => {
    dispatch({ type: 'toggle' });
  };

  return (
    <main className={classes.counter}>
      <h1>Redux Counter</h1>
      {show && <div className={classes.value}>{counter}</div>}
      <div>
        <button onClick={incrementHandler}>Increment</button>
        <button onClick={increaseHandler}>Increase by 5</button>
        <button onClick={decrementHandler}>Decrement</button>
      </div>
      <button onClick={toggleCounterHandler}>Toggle Counter</button>
    </main>
  );
};

export default Counter;